global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

context "math()"
snippet mu "\mu" iA
\mu $0
endsnippet

context "math()"
snippet tau "\tau" iA
\tau $0
endsnippet

context "math()"
snippet kap "\kappa" iA
\kappa$0
endsnippet

context "math()"
snippet rho "\rho" iA
\rho $0
endsnippet

context "math()"
snippet lamb "\lambda" iA
\lambda$0
endsnippet

context "math()"
snippet under "\underbrace" iA
\underbrace
endsnippet

context "math()"
snippet Lamb "\Lambda" iA
\Lambda$0
endsnippet

context "math()"
snippet alp "\alpha" iA
\alpha$0
endsnippet

context "math()"
snippet ^ "^{}" iA
^{$1}
endsnippet

context "math()"
snippet _ "_{}" iA
_{$1}
endsnippet

context "math()"
snippet phy "\varphi" iA
\varphi
endsnippet

context "math()"
snippet psi "\psi" iA
\psi $0
endsnippet

context "math()"
snippet slsh "/" iA
/
endsnippet

context "math()"
snippet to "\to" iA
\to
endsnippet

context "math()"
snippet dag "\dagger" iA
\dag $1
endsnippet

context "math()"
snippet gad "\ddagger" iA
\dagger $1
endsnippet

context "math()"
snippet maps "\mapsto" iA
\mapsto
endsnippet

context "math()"
snippet if "\text{ if }" 
\text{ if }
endsnippet

context "math()"
snippet bet "\beta" iA
\beta$0
endsnippet

context "math()"
snippet gam "\gamma" iA
\gamma$0
endsnippet

context "math()"
snippet bnom "\binom" iA
\binom{$1}{$2}
endsnippet

context "math()"
snippet sig "\sigma" iA
\sigma
endsnippet

context "math()"
snippet Sig "\Sigma" iA
\Sigma
endsnippet

context "math()"
snippet set "\set{}" iA
\set{$1}
endsnippet

context "math()"
snippet sm "\setminus" iA
\setminus
endsnippet

context "math()"
snippet imp "\implies" iA
\implies
endsnippet

context "math()"
snippet pmi "\impliedby" iA
\impliedby
endsnippet

snippet Gam "\Gamma" iA
\Gamma$0
endsnippet

snippet sec "\section*{}" b
\section*{$1}
endsnippet

snippet preamble "basic packages" b
\usepackage{amsmath, amssymb}
endsnippet

snippet sec2 "\section*{}" b
\subsection*{$1}
endsnippet

snippet sec3 "\section*{}" b
\subsubsection*{$1}
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
\end{$1}
endsnippet

context "math()"
snippet sub "\subseteq" iA
\subseteq$1
endsnippet

context "math()"
snippet stack "\substack{}" iA
\substack{$1}
endsnippet

context "math()"
snippet proves "\vdash" iA
\vdash
endsnippet

context "math()"
snippet iff "\iff" iA
\iff
endsnippet

context "math()"
snippet ety "\varnothing" iA
\varnothing
endsnippet

snippet nb "\textbf{NB:}"
\textbf{NB:} $0
endsnippet

context "math()"
snippet cap "\cap" iA
\cap
endsnippet

context "math()"
snippet func "{} : {} \to {}" iA
{$1} : {$2} \to {$3}
endsnippet

context "math()"
snippet cup "\cup" iA
\cup
endsnippet

context "math()"
snippet Cup "\bigcup" iA
\bigcup
endsnippet

context "math()"
snippet geq "\geq" iA
\geq$0
endsnippet

context "math()"
snippet leq "\leq" iA
\leq$0
endsnippet

context "math()"
snippet neq "\neq" iA
\neq$0
endsnippet

context "math()"
snippet in "\in" iA
\in$0
endsnippet

context "math()"
snippet cdot "\cdot" iA
\cdot $1
endsnippet

snippet math "math environment" bA
\[
	$1
\]
endsnippet

snippet ime "inline math environment" A
\($1\)
endsnippet

snippet bls "\\[\baselineskip]" A
\\\\[\baselineskip]
$1
endsnippet

snippet nl "\\" 
\\\\
$1
endsnippet

context "math()"
snippet br "\brac{}" iA
\brac{ $1 } $0
endsnippet

context "math()"
snippet sb "\sbrac{}" iA
\sbrac{ $1 } $0
endsnippet

context "math()"
snippet mat2 "a 2x2 matrix" iA
\begin{pmatrix}
$1 & $2 \\\\
$3 & $4
\end{pmatrix}
endsnippet

context "math()"
snippet sum "summation" iA
\\sum_{ $1 } $2
endsnippet

context "math()"
snippet prod "product" iA
\\prod_{ $1 = $2 }^{ $3 } $4
endsnippet

context "math()"
snippet oo "\infty" iA
\infty
endsnippet

snippet // "fractions" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "fractions" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

snippet bf "\textbf{}"
\\textbf{$1}
endsnippet

snippet it "\textit{}"
\\textit{$1}
endsnippet

context "math()"
snippet mat "\mat" iA
\\mat{$1}{$2}{$3}{$4}
endsnippet

context "math()"
snippet overl "\overline{}" iA
\overline{$1}
endsnippet

context "math()"
snippet overs "\overset{}" iA
\overset{$1}
endsnippet

snippet sup "\textsuperscript{}" i
\textsuperscript{$1}
endsnippet

context "math()"
snippet bb "\mathbb{}" iA
\bb{$1}
endsnippet

context "math()"
snippet mf "\mathfrak{}" iA
\mf{$1}
endsnippet

snippet bf "\mathbf{}" iA
\mathbf{$1}
endsnippet

context "math()"
snippet w~ "\widetilde{}" iA
\widetilde{ $1 }$2
endsnippet

context "math()"
snippet mc "\mathcal{}" iA
\mc{$1}
endsnippet

context "math()"
snippet rm "mathrm{}" iA
\mathrm{$1}
endsnippet

context "math()"
snippet tag "\tag{}" iA
\tag{$1}
endsnippet

context "math()"
snippet abs "\left|\right|\right" iA
\left|$1\right|
endsnippet

snippet dcl "\documentclass{}" b
\\documentclass{$1}
endsnippet

context "math()"
snippet o+ "\oplus" iA
\oplus
endsnippet

context "math()"
snippet O+ "\bigoplus" iA
\bigoplus
endsnippet

context "math()"
snippet phan "\phantom{}" iA
\phantom{$1}
endsnippet

context "math()"
snippet o* "\oplus" iA
\otimes
endsnippet

context "math()"
snippet O* "\bigoplus" iA
\bigotimes
endsnippet

context "math()"
snippet ast "\ast" iA
\ast
endsnippet

context "math()"



priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
